// source: proto/userService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_user_pb = require('../proto/user_pb.js');
goog.object.extend(proto, proto_user_pb);
var proto_area_pb = require('../proto/area_pb.js');
goog.object.extend(proto, proto_area_pb);
goog.exportSymbol('proto.pj.sakuchin.percussion.proto.GetUserProfileResponse', null, global);
goog.exportSymbol('proto.pj.sakuchin.percussion.proto.PostUserLoginRequest', null, global);
goog.exportSymbol('proto.pj.sakuchin.percussion.proto.PostUserLoginResponse', null, global);
goog.exportSymbol('proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest', null, global);
goog.exportSymbol('proto.pj.sakuchin.percussion.proto.PutUserProfileRequest', null, global);
goog.exportSymbol('proto.pj.sakuchin.percussion.proto.SignupUserRequest', null, global);
goog.exportSymbol('proto.pj.sakuchin.percussion.proto.SignupUserResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pj.sakuchin.percussion.proto.SignupUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pj.sakuchin.percussion.proto.SignupUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pj.sakuchin.percussion.proto.SignupUserRequest.displayName = 'proto.pj.sakuchin.percussion.proto.SignupUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pj.sakuchin.percussion.proto.SignupUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pj.sakuchin.percussion.proto.SignupUserResponse.displayName = 'proto.pj.sakuchin.percussion.proto.SignupUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pj.sakuchin.percussion.proto.PostUserLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.displayName = 'proto.pj.sakuchin.percussion.proto.PostUserLoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pj.sakuchin.percussion.proto.PostUserLoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.displayName = 'proto.pj.sakuchin.percussion.proto.PostUserLoginResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pj.sakuchin.percussion.proto.GetUserProfileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.displayName = 'proto.pj.sakuchin.percussion.proto.GetUserProfileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pj.sakuchin.percussion.proto.PutUserProfileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.displayName = 'proto.pj.sakuchin.percussion.proto.PutUserProfileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.repeatedFields_, null);
};
goog.inherits(proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.displayName = 'proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pj.sakuchin.percussion.proto.SignupUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pj.sakuchin.percussion.proto.SignupUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pj.sakuchin.percussion.proto.SignupUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.SignupUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pj.sakuchin.percussion.proto.SignupUserRequest}
 */
proto.pj.sakuchin.percussion.proto.SignupUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pj.sakuchin.percussion.proto.SignupUserRequest;
  return proto.pj.sakuchin.percussion.proto.SignupUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pj.sakuchin.percussion.proto.SignupUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pj.sakuchin.percussion.proto.SignupUserRequest}
 */
proto.pj.sakuchin.percussion.proto.SignupUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pj.sakuchin.percussion.proto.SignupUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pj.sakuchin.percussion.proto.SignupUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pj.sakuchin.percussion.proto.SignupUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.SignupUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.pj.sakuchin.percussion.proto.SignupUserRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pj.sakuchin.percussion.proto.SignupUserRequest} returns this
 */
proto.pj.sakuchin.percussion.proto.SignupUserRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pj.sakuchin.percussion.proto.SignupUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pj.sakuchin.percussion.proto.SignupUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pj.sakuchin.percussion.proto.SignupUserResponse}
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pj.sakuchin.percussion.proto.SignupUserResponse;
  return proto.pj.sakuchin.percussion.proto.SignupUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pj.sakuchin.percussion.proto.SignupUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pj.sakuchin.percussion.proto.SignupUserResponse}
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_user_pb.User;
      reader.readMessage(value,proto_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pj.sakuchin.percussion.proto.SignupUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pj.sakuchin.percussion.proto.SignupUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.pj.sakuchin.percussion.proto.User}
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse.prototype.getUser = function() {
  return /** @type{?proto.pj.sakuchin.percussion.proto.User} */ (
    jspb.Message.getWrapperField(this, proto_user_pb.User, 1));
};


/**
 * @param {?proto.pj.sakuchin.percussion.proto.User|undefined} value
 * @return {!proto.pj.sakuchin.percussion.proto.SignupUserResponse} returns this
*/
proto.pj.sakuchin.percussion.proto.SignupUserResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pj.sakuchin.percussion.proto.SignupUserResponse} returns this
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pj.sakuchin.percussion.proto.SignupUserResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pj.sakuchin.percussion.proto.PostUserLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pj.sakuchin.percussion.proto.PostUserLoginRequest}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pj.sakuchin.percussion.proto.PostUserLoginRequest;
  return proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pj.sakuchin.percussion.proto.PostUserLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pj.sakuchin.percussion.proto.PostUserLoginRequest}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pj.sakuchin.percussion.proto.PostUserLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pj.sakuchin.percussion.proto.PostUserLoginRequest} returns this
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pj.sakuchin.percussion.proto.PostUserLoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pj.sakuchin.percussion.proto.PostUserLoginResponse}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pj.sakuchin.percussion.proto.PostUserLoginResponse;
  return proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pj.sakuchin.percussion.proto.PostUserLoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pj.sakuchin.percussion.proto.PostUserLoginResponse}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_user_pb.User;
      reader.readMessage(value,proto_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pj.sakuchin.percussion.proto.PostUserLoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.pj.sakuchin.percussion.proto.User}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.prototype.getUser = function() {
  return /** @type{?proto.pj.sakuchin.percussion.proto.User} */ (
    jspb.Message.getWrapperField(this, proto_user_pb.User, 1));
};


/**
 * @param {?proto.pj.sakuchin.percussion.proto.User|undefined} value
 * @return {!proto.pj.sakuchin.percussion.proto.PostUserLoginResponse} returns this
*/
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pj.sakuchin.percussion.proto.PostUserLoginResponse} returns this
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pj.sakuchin.percussion.proto.PostUserLoginResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pj.sakuchin.percussion.proto.GetUserProfileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto_user_pb.User.toObject(includeInstance, f),
    userprofile: (f = msg.getUserprofile()) && proto_user_pb.UserProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pj.sakuchin.percussion.proto.GetUserProfileResponse}
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pj.sakuchin.percussion.proto.GetUserProfileResponse;
  return proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pj.sakuchin.percussion.proto.GetUserProfileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pj.sakuchin.percussion.proto.GetUserProfileResponse}
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_user_pb.User;
      reader.readMessage(value,proto_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto_user_pb.UserProfile;
      reader.readMessage(value,proto_user_pb.UserProfile.deserializeBinaryFromReader);
      msg.setUserprofile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pj.sakuchin.percussion.proto.GetUserProfileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getUserprofile();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_user_pb.UserProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.pj.sakuchin.percussion.proto.User}
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.getUser = function() {
  return /** @type{?proto.pj.sakuchin.percussion.proto.User} */ (
    jspb.Message.getWrapperField(this, proto_user_pb.User, 1));
};


/**
 * @param {?proto.pj.sakuchin.percussion.proto.User|undefined} value
 * @return {!proto.pj.sakuchin.percussion.proto.GetUserProfileResponse} returns this
*/
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pj.sakuchin.percussion.proto.GetUserProfileResponse} returns this
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserProfile userProfile = 2;
 * @return {?proto.pj.sakuchin.percussion.proto.UserProfile}
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.getUserprofile = function() {
  return /** @type{?proto.pj.sakuchin.percussion.proto.UserProfile} */ (
    jspb.Message.getWrapperField(this, proto_user_pb.UserProfile, 2));
};


/**
 * @param {?proto.pj.sakuchin.percussion.proto.UserProfile|undefined} value
 * @return {!proto.pj.sakuchin.percussion.proto.GetUserProfileResponse} returns this
*/
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.setUserprofile = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pj.sakuchin.percussion.proto.GetUserProfileResponse} returns this
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.clearUserprofile = function() {
  return this.setUserprofile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pj.sakuchin.percussion.proto.GetUserProfileResponse.prototype.hasUserprofile = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pj.sakuchin.percussion.proto.PutUserProfileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto_user_pb.User.toObject(includeInstance, f),
    userprofile: (f = msg.getUserprofile()) && proto_user_pb.UserProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileRequest}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pj.sakuchin.percussion.proto.PutUserProfileRequest;
  return proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pj.sakuchin.percussion.proto.PutUserProfileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileRequest}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_user_pb.User;
      reader.readMessage(value,proto_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto_user_pb.UserProfile;
      reader.readMessage(value,proto_user_pb.UserProfile.deserializeBinaryFromReader);
      msg.setUserprofile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pj.sakuchin.percussion.proto.PutUserProfileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getUserprofile();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_user_pb.UserProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.pj.sakuchin.percussion.proto.User}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.getUser = function() {
  return /** @type{?proto.pj.sakuchin.percussion.proto.User} */ (
    jspb.Message.getWrapperField(this, proto_user_pb.User, 1));
};


/**
 * @param {?proto.pj.sakuchin.percussion.proto.User|undefined} value
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileRequest} returns this
*/
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileRequest} returns this
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserProfile userProfile = 2;
 * @return {?proto.pj.sakuchin.percussion.proto.UserProfile}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.getUserprofile = function() {
  return /** @type{?proto.pj.sakuchin.percussion.proto.UserProfile} */ (
    jspb.Message.getWrapperField(this, proto_user_pb.UserProfile, 2));
};


/**
 * @param {?proto.pj.sakuchin.percussion.proto.UserProfile|undefined} value
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileRequest} returns this
*/
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.setUserprofile = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileRequest} returns this
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.clearUserprofile = function() {
  return this.setUserprofile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileRequest.prototype.hasUserprofile = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityareasList: jspb.Message.toObjectList(msg.getActivityareasList(),
    proto_area_pb.Area.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest;
  return proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_area_pb.Area;
      reader.readMessage(value,proto_area_pb.Area.deserializeBinaryFromReader);
      msg.addActivityareas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityareasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto_area_pb.Area.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Area activityAreas = 1;
 * @return {!Array<!proto.pj.sakuchin.percussion.proto.Area>}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.prototype.getActivityareasList = function() {
  return /** @type{!Array<!proto.pj.sakuchin.percussion.proto.Area>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_area_pb.Area, 1));
};


/**
 * @param {!Array<!proto.pj.sakuchin.percussion.proto.Area>} value
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest} returns this
*/
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.prototype.setActivityareasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pj.sakuchin.percussion.proto.Area=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pj.sakuchin.percussion.proto.Area}
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.prototype.addActivityareas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pj.sakuchin.percussion.proto.Area, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest} returns this
 */
proto.pj.sakuchin.percussion.proto.PutUserProfileActiveAreasRequest.prototype.clearActivityareasList = function() {
  return this.setActivityareasList([]);
};


goog.object.extend(exports, proto.pj.sakuchin.percussion.proto);
